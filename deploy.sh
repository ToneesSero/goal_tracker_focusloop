#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}üöÄ FocusLoop Goal Tracker Deploy${NC}"
echo -e "${BLUE}================================${NC}"
echo ""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
ENV_FILE=".env.production"
COMPOSE_FILE="docker-compose.prod.yml"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}‚ùå Error: $ENV_FILE file not found${NC}"
    echo "Please create $ENV_FILE based on .env.example"
    exit 1
fi

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
export $(cat $ENV_FILE | grep -v '^#' | xargs)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
echo -e "${YELLOW}üìã Checking required environment variables...${NC}"
REQUIRED_VARS=("POSTGRES_PASSWORD" "SECRET_KEY" "TELEGRAM_BOT_TOKEN" "TELEGRAM_BOT_USERNAME")
MISSING_VARS=()

for var in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!var}" ]; then
        MISSING_VARS+=("$var")
    fi
done

if [ ${#MISSING_VARS[@]} -gt 0 ]; then
    echo -e "${RED}‚ùå Missing required environment variables:${NC}"
    for var in "${MISSING_VARS[@]}"; do
        echo "  - $var"
    done
    exit 1
fi

echo -e "${GREEN}‚úÖ All required variables present${NC}"
echo ""

# –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
echo -e "${YELLOW}üíæ Creating backup before deployment...${NC}"
if docker ps | grep -q "goaltracker_db_prod"; then
    mkdir -p backups
    BACKUP_FILE="backups/pre_deploy_$(date +%Y%m%d_%H%M%S).sql"
    docker-compose -f $COMPOSE_FILE exec -T db pg_dump -U $POSTGRES_USER $POSTGRES_DB > "$BACKUP_FILE" 2>/dev/null
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Backup created: $BACKUP_FILE${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Could not create backup (DB might not be running)${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Database not running, skipping backup${NC}"
fi
echo ""

# Pull latest changes from git
echo -e "${YELLOW}üì• Pulling latest changes from git...${NC}"
if [ -d ".git" ]; then
    git pull origin main || git pull origin master
    echo -e "${GREEN}‚úÖ Git pull completed${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Not a git repository, skipping git pull${NC}"
fi
echo ""

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${YELLOW}üõë Stopping old containers...${NC}"
docker-compose -f $COMPOSE_FILE down
echo -e "${GREEN}‚úÖ Containers stopped${NC}"
echo ""

# –°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
echo -e "${YELLOW}üî® Building new images...${NC}"
docker-compose -f $COMPOSE_FILE build --no-cache
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Build failed!${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Images built successfully${NC}"
echo ""

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${YELLOW}‚ñ∂Ô∏è  Starting containers...${NC}"
docker-compose -f $COMPOSE_FILE up -d
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Failed to start containers!${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Containers started${NC}"
echo ""

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ë–î
echo -e "${YELLOW}‚è≥ Waiting for database to be ready...${NC}"
MAX_TRIES=30
COUNT=0
while [ $COUNT -lt $MAX_TRIES ]; do
    if docker-compose -f $COMPOSE_FILE exec -T db pg_isready -U $POSTGRES_USER > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Database is ready${NC}"
        break
    fi
    COUNT=$((COUNT+1))
    echo -n "."
    sleep 1
done

if [ $COUNT -eq $MAX_TRIES ]; then
    echo -e "${RED}‚ùå Database failed to start within timeout${NC}"
    exit 1
fi
echo ""

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
echo -e "${YELLOW}üìä Applying database migrations...${NC}"
docker-compose -f $COMPOSE_FILE exec -T backend alembic upgrade head
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Migrations applied successfully${NC}"
else
    echo -e "${RED}‚ùå Migration failed!${NC}"
    echo "Check logs: docker-compose -f $COMPOSE_FILE logs backend"
    exit 1
fi
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${YELLOW}üìä Checking container status...${NC}"
docker-compose -f $COMPOSE_FILE ps
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${YELLOW}üè• Checking service health...${NC}"
sleep 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
if docker-compose -f $COMPOSE_FILE exec -T backend curl -f http://localhost:8000/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Backend is healthy${NC}"
else
    echo -e "${RED}‚ùå Backend health check failed${NC}"
fi

echo ""
echo -e "${GREEN}================================${NC}"
echo -e "${GREEN}üéâ Deployment completed!${NC}"
echo -e "${GREEN}================================${NC}"
echo ""
echo "üìù Next steps:"
echo "1. Set up Cloudflare Tunnel (see PRODUCTION_DEPLOY.md)"
echo "2. Configure Telegram bot domain in BotFather"
echo "3. Monitor logs: docker-compose -f $COMPOSE_FILE logs -f"
echo ""
echo "üåê Access points:"
echo "  - Frontend: http://localhost (or your domain)"
echo "  - Backend API: http://localhost/api"
echo "  - API Docs: http://localhost/api/docs"
echo ""
